io.close([f]): equivalent to f:close. Without a file, closes the default output file.

io.flush(): equivalent to file:flush over the default output file.

io.input([f]): when called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets that file handle as the default input file. When called without parameters, it returns the current default input file. In case of errors this function raises the error, instead of returning an error code.

io.lines([filename]): opens the given file name in read mode and returns an iterator function that, each time it is called, returns a new line from the file. The call io.lines() (without a file name) is equivalent to io.input():lines(), that is, it iterates over the lines of the default input file.

io.open(filename[,mode]): this function opens a file, in the mode specified in the string mode. It returns a new file handle, or, in case of errors, nil plus an error message. The mode string can be "r" for read mode (the default); "w" for write mode; "a" for append mode; "r+" for update mode, all previous data is preserved; "w+" for update mode, all previous data is erased; "a+" append update mode, previous data is preserved, writing is only allowed at the end of file.  The mode string may also have a b at the end, which is needed in some systems to open the file in binary mode.

io.output([f]): similar to io.input, but operates over the default output file.

io.read(format1,...): equivalent to io.input():read.

io.tmpfile(): returns a handle for a temporary file. This file is open in update mode and it is automatically removed when the program ends.

io.type(obj): checks whether obj is a valid file handle. Returns the string "file" if obj is an open file handle, "closed file" if obj is a closed file handle, and nil if obj is not a file handle.

io.write(value1,...): equivalent to io.output():write.

f:close(): closes file.

f:flush(): saves any written data to file.

f:lines(): returns an iterator function that, each time it is called, returns a new line from the file.

f:read(format1,...): reads the file file, according to the given formats, which specify what to read. For each format, the function returns a string (or a number) with the characters read, or nil if it cannot read data with the specified format. When called without formats, it uses a default format that reads the entire next line.The available formats are: "*n" reads a number, this is the only format that returns a number instead of a string; "*a" reads the whole file, starting at the current position. On end of file, it returns the empty string; "*l" reads the next line (skipping the end of line), returning nil on end of file. This is the default format; number reads a string with up to that number of characters, returning nil on end of file. If number is zero, it reads nothing and returns an empty string, or nil on end of file. 

f:seek([whence][,offset]): sets and gets the file position, measured from the beginning of the file, to the position given by offset plus a base specified by the string whence, as follows: "set" uses position 0 (beginning of the file); "cur" uses current position; "end" uses end of file. In case of success, function seek returns the final file position, measured in bytes from the beginning of the file. If this function fails, it returns nil, plus a string describing the error. The default value for whence is "cur", and for offset is 0. Therefore, the call file:seek() returns the current file position, without changing it; the call file:seek("set") sets the position to the beginning of the file (and returns 0); and the call file:seek("end") sets the position to the end of the file, and returns its size.

f:write(value1,...): writes the value of each of its arguments to the filehandle file. The arguments must be strings or numbers. To write other values, use tostring or string.format before write.
